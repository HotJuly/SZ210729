1.key的使用
	当某些页面结构通过v-for进行遍历展示时,遍历得到的节点需要添加上唯一标识key值

2.常用作key的数据
	-遍历得到的数据中的唯一标识,例如:id,vid等
	-遍历得到的下标,就是index
	-遍历得到的数据本身,但是数据本身必须是基础数据类型

3.key值的作用
	可以提升diff算法性能
	当遍历的数据发生变化时,组件会根据最新数据创建出新的虚拟DOM树,并与旧的虚拟DOM树进行对比,找到可以复用的真实DOM节点
		对比的目的,就是为了复用旧的真实DOM,减少生成真实DOM的次数
		key值就是比较的关键

	first render(首次渲染)
		1.根据template生成render函数
		2.调用render函数,生成虚拟DOM树
		3.根据虚拟DOM树生成真实DOM树
		4.将生成的真实DOM挂载到页面上进行显示

	update(更新阶段)
		1.调用首次渲染中生成的render函数,并注入最新的数据,从而生成新的虚拟DOM树
		2.将新的虚拟DOM树和首次渲染生成的旧的虚拟DOM树进行对比
			找到相似的虚拟DOM,并复用首次渲染中生成的对应真实DOM
			如果没找到相似的虚拟DOM,就直接生成真实DOM
		3.将最终生成的真实DOM替换掉页面上对应的位置进行显示

	注意:首次渲染中存在虚拟DOM,但是不存在diff算法,diff算法只存在于更新阶段,也就是此处的update的步骤2

4.如果是用下标作为key值,可能出现什么样的错误?
	由于首次渲染中不存在diff算法,所以key值使用下标不会出现任何问题
	但是如果该遍历数据后续会发生变化,那么尽量不要使用下标作为key值

	input案例->该案例中diff算法生效,成功复用了旧的真实DOM节点,但是复用错了
		其实diff算法生效了,只是diff算法的规则不足,导致复用错误

	商品排序案例->该案例中diff算法失效,没有成功复用旧的真实DOM节点,导致新的商品列表全部重新生成真实DOM,
		此时diff算法不仅没有提高代码性能,反而还拖慢代码性能

5.使用唯一标识作为key值的好处
	只要服务器的数据不发生变化,那么前端生成的真实DOM就可以一直复用下去
