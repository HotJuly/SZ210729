1.props
	使用场景:父子组件之间通信
	父传子:
		1.父组件将数据通过标签属性传递给子组件
		2.子组件通过在配置对象中书写props来声明所需要接收到的标签属性

	子传父:
		1.父组件在methods中声明一个用于修改自身状态的函数
		2.父组件通过标签属性将该函数传递给子组件
		3.子组件通过在配置对象中书写props来声明所需要接收到的标签属性
		4.子组件调用接收到的函数,并向内部传入实参

2.provide/inject
	使用场景:祖孙组件之间通信
	1.需要传递数据的祖先组件,在配置对象中添加provide属性,属性值为对象
		对象中可以写上需要传递的属性名和属性值
	2.需要接收数据的后代组件,在配置对象中添加inject属性,属性值为数组
		数组中可以写需要接收的属性名
		接收之后,就可以在this身上直接访问该属性

	注意:
		1.provide 和 inject 绑定并不是可响应的
			也就是说修改provide的数据不会导致使用数据的后代组件发生变化
			如果想要得到响应式的效果,可以自己使用Vue.observable去加工provide暴露出去的数据,将其变为响应式

3.自定义事件
	$on->可以给当前组件实例对象绑定自定义事件
	$once->可以给当前组件实例对象绑定自定义事件,但是只能触发一次,之后就不再触发
	$off->可以用来移除当前组件实例对象的自定义事件
		this.$off()->相当于把当前组件所有的自定义事件都移除
		this.$off('a')->相当于把当前组件名称为a的自定义事件都移除
		this.$off('a',callback)->相当于把当前组件名称为a同时回调函数与提供的callback相同的自定义事件移除
	$emit->可以触发当前组件实例对象的某类自定义事件

	v-model
		v-model具有两种使用方法
			对input标签使用
				-将data中的某个响应式数据的值作为默认值在input框中进行展示
    					<input type="text" :value="msg">
				-当用户修改输入框的内容时,会同步修改data中对应的响应式属性的值
					通过input事件监视用户对输入框内容的修改
    					<input type="text" @input="event=>msg=event.target.value">
			对组件标签使用
				-将data中的某个响应式数据的值通过标签属性传递给子组件(标签属性名:value)
    					<HelloWorld :value="msg" />
				-给子组件绑定自定义事件input,开发者可以通过触发该事件来修改父组件对应的响应式属性(事件名:input)
    					<HelloWorld @input="data=>msg=data" />
			model配置项说明
				prop属性用于自定义父组件传递下来的标签属性名称
				event属性用于自定义父组件给子组件绑定的自定义事件名称

	.sync修饰符
		-可以通过标签属性向子组件传递数据
    			<HelloWorld :value="msg" />
		-给子组件绑定自定义事件,用于让子组件修改父组件的对应状态数据(事件名:update:+标签属性名)
    			<HelloWorld :a123="msg" @update:a123="data=>msg=data"/>

	全局事件总线
		1.创建一个Vue的实例对象放到Vue的原型对象上,使得所有的组件都能看到该实例对象
			Vue.prototype.$bus = new Vue();
			注意:此处$bus必须存放一个Vue的实例对象,因为$on和$emit方法都在Vue.prototype上
		2.在需要接收数据的组件代码中,给$bus对象绑定自定义事件,并提供回调函数用于接收数据
    			this.$bus.$on('getMsg123',(data)=>{
      				console.log('getMsg123',data)
    			})
		3.在需要发送数据的组件代码中,触发$bus对象的自定义事件,并提供需要发送的数据
      			this.$bus.$emit('getMsg123',"我是子组件传递的数据")

4.找到对应组件的实例对象
	$parent->可以找到父组件的实例对象
	$root->可以找到当前项目的根组件实例对象(就是main.js中通过new Vue创建的最大组件)
	$children->可以得到当前组件的所有子组件组成的数组
		注意:$children 并不保证顺序，也不是响应式的
			如果在子组件中存在异步组件,那么$children的存储顺序和代码书写顺序可能不一致
			该数组内的实例对象排列顺序,不会影响到页面的展示顺序
	$refs->该属性需要配合标签属性ref进行使用
		如果ref标识的是一个组件标签,那么通过$refs可以获得该组件的组件实例对象
		如果ref标识的是一个html标签,那么通过$refs可以获得该标签对应的真实DOM

5.$attrs,$listeners
	$attrs->用于收集父组件传递的标签属性,其中没有被props接收的标签属性都会放入$attrs中
	$listeners->用于收集当前组件身上所有的自定义事件
