1.props
	使用场景:父子组件之间通信
	父传子:
		1.父组件将数据通过标签属性传递给子组件
		2.子组件通过在配置对象中书写props来声明所需要接收到的标签属性

	子传父:
		1.父组件在methods中声明一个用于修改自身状态的函数
		2.父组件通过标签属性将该函数传递给子组件
		3.子组件通过在配置对象中书写props来声明所需要接收到的标签属性
		4.子组件调用接收到的函数,并向内部传入实参

2.provide/inject
	使用场景:祖孙组件之间通信
	1.需要传递数据的祖先组件,在配置对象中添加provide属性,属性值为对象
		对象中可以写上需要传递的属性名和属性值
	2.需要接收数据的后代组件,在配置对象中添加inject属性,属性值为数组
		数组中可以写需要接收的属性名
		接收之后,就可以在this身上直接访问该属性

	注意:
		1.provide 和 inject 绑定并不是可响应的
			也就是说修改provide的数据不会导致使用数据的后代组件发生变化
			如果想要得到响应式的效果,可以自己使用Vue.observable去加工provide暴露出去的数据,将其变为响应式

3.自定义事件
	v-model
		v-model具有两种使用方法
			对input标签使用
				-将data中的某个响应式数据的值作为默认值在input框中进行展示
    					<input type="text" :value="msg">
				-当用户修改输入框的内容时,会同步修改data中对应的响应式属性的值
					通过input事件监视用户对输入框内容的修改
    					<input type="text" @input="event=>msg=event.target.value">
			对组件标签使用
				-将data中的某个响应式数据的值通过标签属性传递给子组件(标签属性名:value)
    					<HelloWorld :value="msg" />
				-给子组件绑定自定义事件input,开发者可以通过触发该事件来修改父组件对应的响应式属性(事件名:input)
    					<HelloWorld @input="data=>msg=data" />
			model配置项说明
				prop属性用于自定义父组件传递下来的标签属性名称
				event属性用于自定义父组件给子组件绑定的自定义事件名称
	

